

# Install pip
pip install --upgrade pip

# Install Virtualenv -  every project can have a separate version of Django & other plugins that you install.
pip install virtualenv

# Create a folder for your project and activate the virtualenv within the new folder
mkdir myhellowebapp
cd myhellowebapp/

python -m venv myvenv
source myvenv/bin/activate

# Install Django
pip install django~=1.11.0

# Start git - your project folder will make the entire folder and its contents part of a new Git repository.
git init

# Create a Django project
django-admin startproject hellowebapp .

# Create a Django app - A project can run many apps (all doing something distinct).
django-admin startapp collection

# Add your new app to your settings file - tell the project that we've added an app to it
cd hellowebapp/
INSTALLED_APPS = [
    'collection',


# Set up your database - It's going to create your database automatically
python manage.py migrate

# Start your local server
python manage.py runserver

# In your web browser visit http://localhost:8000 (http://127.0.0.1:8000/) where you'll see a "Welcome to Django" page.

# Stop the server: Ctrl + C
-----------------------------------------------------------------------------------------------------------------------
==> You've launched your Django Web App! Next: Make it look like a website.
-----------------------------------------------------------------------------------------------------------------------

# Setting up your templates
cd collection/
mkdir templates
cd templates
touch index.html

# Add to touch.html the necessary pieces to display a typical webpage.

<!doctype html>
<html>
<head>
    <title>My Hello Web App Project</title>
</head>
<body>
    <h1> Hello World!</h1>
    <p>I am a basic website.</p>
</body>
</html>

# Browser http://localhost:8000 displays the same default page - Need to tell Django how to get the index.html file

# Adding a URL to urls.py
# Associate the root directory (/) with index.html  - Go to dir hellowebapp/ and modify file: urls.py

from django.conf.urls import url
from django.contrib import admin
from projects.myhellowebapp.collection import views

urlpatterns = [
    url('r^$', views.index, name='home'),
    url(r'^admin/', admin.site.urls),

]

# Create your first view
# You have the template: index.html and the URL entry in urls.py
# => Tie them together so that the URL will display the template => in dir collection, file views.py  create the view

from django.shortcuts import render


# Create your views here.
def index(request):
    # this is your new view
    return render(request, 'index.html')

# Browser http://localhost:8000 displays the index.html page now

# Add static files - get CSS styling for the new created HTML page
# Create directories for static files

cd collection/
mkdir static
cd static
mkdir images
mkdir js
mkdir css
cd css
touch style.css

# Go back to dir templates, file index.html and tell Django that there's static files used on this page
# Add {% load staticfiles %} at top of index.html => now you can add sattic files to this templates
# Add your CSS tag to the <HEAD>, under <title> using syntax: {% static 'Filelocation/Filename.type' %}

<link rel="stylesheet" href="{% static 'css/style.css' %}" />

# Add some stylesheet declarations to stylesheet.css file and checkout  http://localhost:8000 again

body {
    background-color: cornflowerblue;
    }


# Build complex templates with inheritance
# create one base layout template that all other templates import
cd collection/templates
touch base.html

# https://docs.djangoproject.com/en/1.9/ref/templates/builtins/

Adding dynamic data
--------------------

# Create a superuser -> admin user: gabriela
python manage.py createsuperuser

# Setting up your model -> models.py
# "Collection of things" -> name of the thing, description of it, slug of the thing

# Finish setting up your DB -> with migrations, which help Django track changes to DB
# Create migration file and apply all the migrations to the existing DB tables
python manage.py makemigrations
python manage.py migrate

# Use the Django admin
# Tell your admin to display the info in our Thing model: cd collection -> admin.py
from collection.models import Thing
admin.site.register(Thing)


-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------